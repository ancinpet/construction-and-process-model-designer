{"version":3,"sources":["webpack:///./src/main/js/apps/organizations/components/OrganizationDelete.tsx","webpack:///./src/main/js/components/controls/Modal.tsx","webpack:///./src/main/js/components/controls/SimpleModal.tsx","webpack:///./src/main/js/components/controls/ModalButton.tsx","webpack:///./src/main/js/components/controls/ConfirmModal.tsx","webpack:///./src/main/js/components/controls/ConfirmButton.tsx","webpack:///./src/main/js/apps/organizations/actions.ts"],"names":["OrganizationDelete","_super","_this","apply","this","arguments","mounted","state","fetchOrganizationPlanInfo","Object","_helpers_system__WEBPACK_IMPORTED_MODULE_10__","_api_organizations__WEBPACK_IMPORTED_MODULE_9__","props","organization","key","then","billingInfo","setState","hasPaidPlan","subscription","status","onDelete","deleteOrganization","context","router","replace","__extends","prototype","componentDidMount","componentWillUnmount","render","title","_helpers_l10n__WEBPACK_IMPORTED_MODULE_6__","react__WEBPACK_IMPORTED_MODULE_0__","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","a","className","_components_common_InstanceMessage__WEBPACK_IMPORTED_MODULE_5__","message","_components_controls_ConfirmButton__WEBPACK_IMPORTED_MODULE_4__","confirmButtonText","isDestructive","modalBody","modalHeader","onConfirm","_a","onClick","_components_ui_buttons__WEBPACK_IMPORTED_MODULE_8__","contextTypes","prop_types__WEBPACK_IMPORTED_MODULE_1__","mapDispatchToProps","_actions__WEBPACK_IMPORTED_MODULE_7__","__webpack_exports__","react_redux__WEBPACK_IMPORTED_MODULE_3__","Modal","react_modal__WEBPACK_IMPORTED_MODULE_1__","__assign","classnames__WEBPACK_IMPORTED_MODULE_2__","modal-medium","medium","modal-large","large","isOpen","overlayClassName","SimpleModal","submitting","stopSubmitting","handleCloseClick","event","preventDefault","currentTarget","blur","onClose","handleFormSubmit","submit","handleSubmitClick","result","onSubmit","_Modal__WEBPACK_IMPORTED_MODULE_1__","contentLabel","header","onRequestClose","children","onCloseClick","onFormSubmit","onSubmitClick","ModalButton","modal","handleButtonClick","handleCloseModal","ConfirmModal","handleSubmit","confirmData","renderModalContent","_b","confirmDisable","_common_DeferredSpinner__WEBPACK_IMPORTED_MODULE_2__","loading","_ui_buttons__WEBPACK_IMPORTED_MODULE_4__","autoFocus","undefined","disabled","_helpers_l10n__WEBPACK_IMPORTED_MODULE_3__","_SimpleModal__WEBPACK_IMPORTED_MODULE_1__","ConfirmButton","renderConfirmModal","_ConfirmModal__WEBPACK_IMPORTED_MODULE_2__","_ModalButton__WEBPACK_IMPORTED_MODULE_1__","fetchOrganization","dispatch","Promise","all","_api_organizations__WEBPACK_IMPORTED_MODULE_0__","navigation","organizationWithPermissions","_store_organizations__WEBPACK_IMPORTED_MODULE_1__","updateOrganization","changes","_store_globalMessages__WEBPACK_IMPORTED_MODULE_2__"],"mappings":"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","file":"js/315.e1e50065.chunk.js","sourcesContent":["/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { connect } from 'react-redux';\nimport ConfirmButton from '../../../components/controls/ConfirmButton';\nimport InstanceMessage from '../../../components/common/InstanceMessage';\nimport { translate } from '../../../helpers/l10n';\nimport { deleteOrganization } from '../actions';\nimport { Organization } from '../../../app/types';\nimport { Button } from '../../../components/ui/buttons';\nimport { getOrganizationBilling } from '../../../api/organizations';\nimport { isSonarCloud } from '../../../helpers/system';\n\ninterface DispatchToProps {\n  deleteOrganization: (key: string) => Promise<void>;\n}\n\ninterface OwnProps {\n  organization: Pick<Organization, 'key' | 'name'>;\n}\n\ntype Props = OwnProps & DispatchToProps;\n\ninterface State {\n  hasPaidPlan?: boolean;\n}\n\nexport class OrganizationDelete extends React.PureComponent<Props, State> {\n  mounted = false;\n  static contextTypes = {\n    router: PropTypes.object\n  };\n\n  state: State = {};\n\n  componentDidMount() {\n    this.mounted = true;\n    this.fetchOrganizationPlanInfo();\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  fetchOrganizationPlanInfo = () => {\n    if (isSonarCloud()) {\n      getOrganizationBilling(this.props.organization.key).then(\n        billingInfo => {\n          if (this.mounted) {\n            this.setState({\n              hasPaidPlan: billingInfo.subscription.status !== 'inactive'\n            });\n          }\n        },\n        () => {\n          if (this.mounted) {\n            this.setState({ hasPaidPlan: false });\n          }\n        }\n      );\n    }\n  };\n\n  onDelete = () => {\n    return this.props.deleteOrganization(this.props.organization.key).then(() => {\n      this.context.router.replace('/');\n    });\n  };\n\n  render() {\n    const { hasPaidPlan } = this.state;\n    const title = translate('organization.delete');\n    return (\n      <>\n        <Helmet title={title} />\n        <div className=\"page page-limited\">\n          <header className=\"page-header\">\n            <h1 className=\"page-title\">{title}</h1>\n            <div className=\"page-description\">\n              <InstanceMessage message={translate('organization.delete.description')} />\n            </div>\n          </header>\n          <ConfirmButton\n            confirmButtonText={translate('delete')}\n            isDestructive={true}\n            modalBody={\n              <div>\n                {hasPaidPlan && (\n                  <div className=\"alert alert-warning modal-alert\">\n                    {translate('organization.delete.sonarcloud.paid_plan_info')}\n                  </div>\n                )}\n                <p>{translate('organization.delete.question')}</p>\n              </div>\n            }\n            modalHeader={translate('organization.delete')}\n            onConfirm={this.onDelete}>\n            {({ onClick }) => (\n              <Button className=\"js-custom-measure-delete button-red\" onClick={onClick}>\n                {translate('delete')}\n              </Button>\n            )}\n          </ConfirmButton>\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps: DispatchToProps = { deleteOrganization: deleteOrganization as any };\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(OrganizationDelete);\n","/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport * as ReactModal from 'react-modal';\nimport * as classNames from 'classnames';\n\nReactModal.setAppElement('#content');\n\ninterface OwnProps {\n  medium?: boolean;\n  large?: boolean;\n}\n\ntype MandatoryProps = Pick<ReactModal.Props, 'contentLabel'>;\n\ntype Props = Partial<ReactModal.Props> & MandatoryProps & OwnProps;\n\nexport default function Modal(props: Props) {\n  return (\n    <ReactModal\n      className={classNames('modal', { 'modal-medium': props.medium, 'modal-large': props.large })}\n      isOpen={true}\n      overlayClassName=\"modal-overlay\"\n      {...props}\n    />\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport Modal from './Modal';\n\nexport interface ChildrenProps {\n  onCloseClick: (event?: React.SyntheticEvent<HTMLElement>) => void;\n  onFormSubmit: (event: React.SyntheticEvent<HTMLFormElement>) => void;\n  onSubmitClick: (event?: React.SyntheticEvent<HTMLElement>) => void;\n  submitting: boolean;\n}\n\ninterface Props {\n  children: (props: ChildrenProps) => React.ReactNode;\n  header: string;\n  onClose: () => void;\n  onSubmit: () => void | Promise<void>;\n}\n\ninterface State {\n  submitting: boolean;\n}\n\nexport default class SimpleModal extends React.Component<Props, State> {\n  mounted = false;\n  state: State = { submitting: false };\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  stopSubmitting = () => {\n    if (this.mounted) {\n      this.setState({ submitting: false });\n    }\n  };\n\n  handleCloseClick = (event?: React.SyntheticEvent<HTMLElement>) => {\n    if (event) {\n      event.preventDefault();\n      event.currentTarget.blur();\n    }\n    this.props.onClose();\n  };\n\n  handleFormSubmit = (event: React.SyntheticEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    this.submit();\n  };\n\n  handleSubmitClick = (event?: React.SyntheticEvent<HTMLElement>) => {\n    if (event) {\n      event.preventDefault();\n      event.currentTarget.blur();\n    }\n    this.submit();\n  };\n\n  submit = () => {\n    const result = this.props.onSubmit();\n    if (result) {\n      this.setState({ submitting: true });\n      result.then(this.stopSubmitting, this.stopSubmitting);\n    }\n  };\n\n  render() {\n    return (\n      <Modal contentLabel={this.props.header} onRequestClose={this.props.onClose}>\n        {this.props.children({\n          onCloseClick: this.handleCloseClick,\n          onFormSubmit: this.handleFormSubmit,\n          onSubmitClick: this.handleSubmitClick,\n          submitting: this.state.submitting\n        })}\n      </Modal>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\n\nexport interface ChildrenProps {\n  onClick: () => void;\n  onFormSubmit: (event: React.FormEvent<HTMLFormElement>) => void;\n}\n\nexport interface ModalProps {\n  onClose: () => void;\n}\n\nexport interface Props {\n  children: (props: ChildrenProps) => React.ReactNode;\n  modal: (props: ModalProps) => React.ReactNode;\n}\n\ninterface State {\n  modal: boolean;\n}\n\nexport default class ModalButton extends React.PureComponent<Props, State> {\n  mounted = false;\n  state: State = { modal: false };\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  handleButtonClick = () => {\n    this.setState({ modal: true });\n  };\n\n  handleFormSubmit = (event?: React.FormEvent<HTMLFormElement>) => {\n    if (event) {\n      event.preventDefault();\n    }\n    this.setState({ modal: true });\n  };\n\n  handleCloseModal = () => {\n    if (this.mounted) {\n      this.setState({ modal: false });\n    }\n  };\n\n  render() {\n    return (\n      <>\n        {this.props.children({\n          onClick: this.handleButtonClick,\n          onFormSubmit: this.handleFormSubmit\n        })}\n        {this.state.modal && this.props.modal({ onClose: this.handleCloseModal })}\n      </>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport SimpleModal, { ChildrenProps } from './SimpleModal';\nimport DeferredSpinner from '../common/DeferredSpinner';\nimport { translate } from '../../helpers/l10n';\nimport { SubmitButton, ResetButtonLink } from '../ui/buttons';\n\ninterface Props<T> {\n  children: React.ReactNode;\n  confirmButtonText: string;\n  confirmData?: T;\n  confirmDisable?: boolean;\n  header: string;\n  isDestructive?: boolean;\n  onClose: () => void;\n  onConfirm: (data?: T) => void | Promise<void>;\n}\n\nexport default class ConfirmModal<T = string> extends React.PureComponent<Props<T>> {\n  mounted = false;\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  handleSubmit = () => {\n    const result = this.props.onConfirm(this.props.confirmData);\n    if (result) {\n      return result.then(this.props.onClose, () => {});\n    } else {\n      this.props.onClose();\n      return undefined;\n    }\n  };\n\n  renderModalContent = ({ onCloseClick, onFormSubmit, submitting }: ChildrenProps) => {\n    const { children, confirmButtonText, confirmDisable, header, isDestructive } = this.props;\n    return (\n      <form onSubmit={onFormSubmit}>\n        <header className=\"modal-head\">\n          <h2>{header}</h2>\n        </header>\n        <div className=\"modal-body\">{children}</div>\n        <footer className=\"modal-foot\">\n          <DeferredSpinner className=\"spacer-right\" loading={submitting} />\n          <SubmitButton\n            autoFocus={true}\n            className={isDestructive ? 'button-red' : undefined}\n            disabled={submitting || confirmDisable}>\n            {confirmButtonText}\n          </SubmitButton>\n          <ResetButtonLink disabled={submitting} onClick={onCloseClick}>\n            {translate('cancel')}\n          </ResetButtonLink>\n        </footer>\n      </form>\n    );\n  };\n\n  render() {\n    const { header } = this.props;\n    return (\n      <SimpleModal header={header} onClose={this.props.onClose} onSubmit={this.handleSubmit}>\n        {this.renderModalContent}\n      </SimpleModal>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport ModalButton, { ChildrenProps, ModalProps } from './ModalButton';\nimport ConfirmModal from './ConfirmModal';\n\nexport { ChildrenProps } from './ModalButton';\n\ninterface Props {\n  children: (props: ChildrenProps) => React.ReactNode;\n  confirmButtonText: string;\n  confirmData?: string;\n  confirmDisable?: boolean;\n  isDestructive?: boolean;\n  modalBody: React.ReactNode;\n  modalHeader: string;\n  onConfirm: (data?: string) => void | Promise<void>;\n}\n\ninterface State {\n  modal: boolean;\n}\n\nexport default class ConfirmButton extends React.PureComponent<Props, State> {\n  renderConfirmModal = ({ onClose }: ModalProps) => {\n    return (\n      <ConfirmModal\n        confirmButtonText={this.props.confirmButtonText}\n        confirmData={this.props.confirmData}\n        confirmDisable={this.props.confirmDisable}\n        header={this.props.modalHeader}\n        isDestructive={this.props.isDestructive}\n        onClose={onClose}\n        onConfirm={this.props.onConfirm}>\n        {this.props.modalBody}\n      </ConfirmModal>\n    );\n  };\n\n  render() {\n    return <ModalButton modal={this.renderConfirmModal}>{this.props.children}</ModalButton>;\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { Dispatch } from 'redux';\nimport * as api from '../../api/organizations';\nimport * as actions from '../../store/organizations';\nimport { addGlobalSuccessMessage } from '../../store/globalMessages';\nimport { translate, translateWithParameters } from '../../helpers/l10n';\nimport { Organization, OrganizationBase } from '../../app/types';\nimport { Store } from '../../store/rootReducer';\n\nexport const fetchOrganization = (key: string) => (dispatch: Dispatch<Store>) => {\n  return Promise.all([api.getOrganization(key), api.getOrganizationNavigation(key)]).then(\n    ([organization, navigation]) => {\n      if (organization) {\n        const organizationWithPermissions = { ...organization, ...navigation };\n        dispatch(actions.receiveOrganizations([organizationWithPermissions]));\n      }\n    }\n  );\n};\n\nexport const createOrganization = (organization: OrganizationBase) => (\n  dispatch: Dispatch<Store>\n) => {\n  return api.createOrganization(organization).then((organization: Organization) => {\n    dispatch(actions.createOrganization(organization));\n    dispatch(\n      addGlobalSuccessMessage(translateWithParameters('organization.created', organization.name))\n    );\n    return organization;\n  });\n};\n\nexport const updateOrganization = (key: string, changes: OrganizationBase) => (\n  dispatch: Dispatch<Store>\n) => {\n  return api.updateOrganization(key, changes).then(() => {\n    dispatch(actions.updateOrganization(key, changes));\n    dispatch(addGlobalSuccessMessage(translate('organization.updated')));\n  });\n};\n\nexport const deleteOrganization = (key: string) => (dispatch: Dispatch<Store>) => {\n  return api.deleteOrganization(key).then(() => {\n    dispatch(actions.deleteOrganization(key));\n    dispatch(addGlobalSuccessMessage(translate('organization.deleted')));\n  });\n};\n"],"sourceRoot":""}